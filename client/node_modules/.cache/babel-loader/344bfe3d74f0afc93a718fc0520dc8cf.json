{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport MessagesChat from \"../components/Chat/ChatContainer.vue\";\nimport { VueTyper } from \"vue-typer\";\nexport default {\n  name: \"ChatPage\",\n  components: {\n    MessagesChat: MessagesChat,\n    VueTyper: VueTyper\n  },\n  data: function data() {\n    return {\n      //Username data\n      username: \"You\",\n      //Socket for connection\n      socket: {},\n      //All messages\n      chat: [],\n      //Message\n      message: \"\",\n      //Typing process\n      isTyping: false,\n      someoneTyping: false,\n      lastTypingTime: new Date(),\n      TYPING_TIMER_LENGTH: 400,\n      messageRules: [function (v) {\n        return !!v || \"Message can't be empty\";\n      }]\n    };\n  },\n  created: function created() {\n    var Socket = io(\"http://localhost:3000\");\n    Socket.on(\"connect\", function () {\n      console.log(\"You connected with id : \".concat(Socket.id));\n    });\n    this.socket = Socket;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.socket.on(\"message\", function (msg) {\n      _this.chat.push(msg);\n    }); //Login\n    //Add new user to the chat rooom\n  },\n  watch: {\n    // whenever question changes, this function will run\n    message: function message() {\n      this.updateTyping();\n    }\n  },\n  methods: {\n    sendMessage: function sendMessage() {\n      if (this.message != \"\") {\n        this.socket.emit(\"message\", this.message);\n        this.chat.push({\n          username: this.username,\n          message: this.message\n        });\n        this.message = \"\";\n      }\n    },\n    updateTyping: function updateTyping() {\n      var _this2 = this;\n\n      //TODO : put if is connected or not\n      console.log(this.isTyping);\n\n      if (this.isTyping === false) {\n        this.typing = true;\n        this.socket.emit(\"typing\");\n      } else {\n        console.log(\"wacha\");\n      }\n\n      this.lastTypingTime = new Date().getTime();\n      setTimeout(function () {\n        var typingTimer = new Date().getTime();\n        var timeDiff = typingTimer - _this2.lastTypingTime;\n\n        if (timeDiff >= _this2.TYPING_TIMER_LENGTH && _this2.isTyping) {\n          _this2.socket.emit(\"stop typing\");\n\n          _this2.typing = false;\n        }\n      }, this.TYPING_TIMER_LENGTH);\n    }\n  }\n};","map":{"version":3,"mappings":"AACA;AACA;AACA;AAEA;AACAA,kBADA;AAEAC;AACAC,8BADA;AAEAC;AAFA,GAFA;AAMAC,MANA,kBAMA;AACA;AACA;AACAC,qBAFA;AAGA;AACAC,gBAJA;AAKA;AACAC,cANA;AAOA;AACAC,iBARA;AASA;AACAC,qBAVA;AAWAC,0BAXA;AAYAC,gCAZA;AAaAC,8BAbA;AAcAC;AAAA;AAAA;AAdA;AAgBA,GAvBA;AAwBAC,SAxBA,qBAwBA;AACA;AACAC;AACAC;AACA,KAFA;AAGA;AACA,GA9BA;AA+BAC,SA/BA,qBA+BA;AAAA;;AACA;AACA;AACA,KAFA,EADA,CAIA;AACA;AACA,GArCA;AAsCAC;AACA;AACAV,WAFA,qBAEA;AACA;AACA;AAJA,GAtCA;AA4CAW;AACAC,eADA,yBACA;AACA;AACA;AACA;AAAAf;AAAAG;AAAA;AACA;AACA;AACA,KAPA;AAQAa,gBARA,0BAQA;AAAA;;AACA;AACAL;;AACA;AACA;AACA;AACA,OAHA,MAGA;AACAA;AACA;;AACA;AAEAM;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,OAPA,EAOA,wBAPA;AAQA;AA3BA;AA5CA","names":["name","components","MessagesChat","VueTyper","data","username","socket","chat","message","isTyping","someoneTyping","lastTypingTime","TYPING_TIMER_LENGTH","messageRules","created","Socket","console","mounted","watch","methods","sendMessage","updateTyping","setTimeout"],"sourceRoot":"src/views","sources":["ChatView.vue"],"sourcesContent":["<script>\nimport { io } from \"socket.io-client\";\nimport MessagesChat from \"../components/Chat/ChatContainer.vue\";\nimport { VueTyper } from \"vue-typer\";\n\nexport default {\n  name: \"ChatPage\",\n  components: {\n    MessagesChat,\n    VueTyper,\n  },\n  data() {\n    return {\n      //Username data\n      username: \"You\",\n      //Socket for connection\n      socket: {},\n      //All messages\n      chat: [],\n      //Message\n      message: \"\",\n      //Typing process\n      isTyping: false,\n      someoneTyping: false,\n      lastTypingTime: new Date(),\n      TYPING_TIMER_LENGTH: 400,\n      messageRules: [(v) => !!v || \"Message can't be empty\"],\n    };\n  },\n  created() {\n    var Socket = io(\"http://localhost:3000\");\n    Socket.on(\"connect\", () => {\n      console.log(`You connected with id : ${Socket.id}`);\n    });\n    this.socket = Socket;\n  },\n  mounted() {\n    this.socket.on(\"message\", (msg) => {\n      this.chat.push(msg);\n    });\n    //Login\n    //Add new user to the chat rooom\n  },\n  watch: {\n    // whenever question changes, this function will run\n    message() {\n      this.updateTyping();\n    },\n  },\n  methods: {\n    sendMessage() {\n      if (this.message != \"\") {\n        this.socket.emit(\"message\", this.message);\n        this.chat.push({ username: this.username, message: this.message });\n        this.message = \"\";\n      }\n    },\n    updateTyping() {\n      //TODO : put if is connected or not\n      console.log(this.isTyping);\n      if (this.isTyping === false) {\n        this.typing = true;\n        this.socket.emit(\"typing\");\n      } else {\n        console.log(\"wacha\");\n      }\n      this.lastTypingTime = new Date().getTime();\n\n      setTimeout(() => {\n        const typingTimer = new Date().getTime();\n        const timeDiff = typingTimer - this.lastTypingTime;\n        if (timeDiff >= this.TYPING_TIMER_LENGTH && this.isTyping) {\n          this.socket.emit(\"stop typing\");\n          this.typing = false;\n        }\n      }, this.TYPING_TIMER_LENGTH);\n    },\n  },\n};\n</script>\n\n<template>\n  <v-container fluid>\n    <h1>Register as {{ username }} {{ isTyping }} {{ message }}</h1>\n    <MessagesChat :chat.sync=\"chat\"></MessagesChat>\n    <vue-typer v-if=\"someoneTyping\" text=\"Someone is writting...\"></vue-typer>\n    <v-form ref=\"form\" @submit=\"sendMessage\">\n      <v-footer padless absolute>\n        <v-container>\n          <v-row>\n            <v-textarea\n              filled\n              auto-grow\n              v-model=\"message\"\n              label=\"Send a Message\"\n              placeholder=\"Aa\"\n              outlined\n            ></v-textarea>\n            <v-btn depressed color=\"primary\" type=\"submit\"> Send </v-btn>\n          </v-row>\n        </v-container>\n        <v-col class=\"text-center\" cols=\"12\"> </v-col>\n      </v-footer>\n    </v-form>\n  </v-container>\n</template>\n\n"]},"metadata":{},"sourceType":"module"}