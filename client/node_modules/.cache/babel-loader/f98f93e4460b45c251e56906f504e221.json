{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport MessagesChat from \"../components/Chat/ChatContainer.vue\";\nimport { VueTyper } from \"vue-typer\";\nexport default {\n  name: \"ChatPage\",\n  components: {\n    MessagesChat: MessagesChat,\n    VueTyper: VueTyper\n  },\n  data: function data() {\n    return {\n      //Username data\n      username: \"You\",\n      userProfile: {},\n      //Socket for connection\n      socket: {},\n      //All messages\n      chat: [],\n      //Message\n      message: \"\",\n      //Online user,\n      onlineUsers: [],\n      //Typing process\n      isTyping: false,\n      someoneTyping: false,\n      lastTypingTime: new Date(),\n      TYPING_TIMER_LENGTH: 400,\n      messageRules: [function (v) {\n        return !!v || \"Message can't be empty\";\n      }]\n    };\n  },\n  created: function created() {\n    //initial connection to the server\n    var Socket = io(\"http://localhost:3000\");\n    Socket.on(\"connect\", function () {\n      console.log(\"You connected with id : \".concat(Socket.id));\n    });\n    Socket.emit(\"login\");\n    this.socket = Socket;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    //LISTENERS OF THE SOCKET\n    //Send a message\n    this.socket.on(\"message\", function (msg) {\n      _this.chat.push(msg);\n    }); // Whenever the server emits 'typing', show the typing message\n\n    this.socket.on(\"typing\", function (data) {\n      console.log(data);\n      _this.someoneTyping = true;\n    }); // Whenever the server emits 'stop typing', kill the typing message\n\n    this.socket.on(\"stop typing\", function (data) {\n      console.log(data);\n      _this.someoneTyping = false;\n    });\n    this.socket.on(\"login\", function (data) {}); //Add new user to the chat room\n\n    this.socket.on(\"online users\", function (users) {\n      _this.onlineUsers = users;\n    }); //disconnect of the chat room\n  },\n  watch: {\n    // whenever question changes, this function will run\n    message: function message() {\n      this.updateTyping();\n    }\n  },\n  methods: {\n    sendMessage: function sendMessage() {\n      if (this.message != \"\") {\n        this.socket.emit(\"message\", this.message);\n        this.chat.push({\n          username: this.username,\n          message: this.message\n        });\n        this.message = \"\";\n      }\n    },\n    updateTyping: function updateTyping() {\n      var _this2 = this;\n\n      //TODO : put if is connected or not\n      if (this.isTyping === false) {\n        this.isTyping = true;\n        this.socket.emit(\"typing\");\n        console.log(\"typing\");\n      }\n\n      this.lastTypingTime = new Date().getTime();\n      setTimeout(function () {\n        var typingTimer = new Date().getTime();\n        var timeDiff = typingTimer - _this2.lastTypingTime;\n\n        if (timeDiff >= _this2.TYPING_TIMER_LENGTH && _this2.isTyping) {\n          _this2.socket.emit(\"stop typing\");\n\n          _this2.isTyping = false;\n        }\n      }, this.TYPING_TIMER_LENGTH);\n    }\n  }\n};","map":{"version":3,"mappings":"AACA;AACA;AACA;AAEA;AACAA,kBADA;AAEAC;AACAC,8BADA;AAEAC;AAFA,GAFA;AAMAC,MANA,kBAMA;AACA;AACA;AACAC,qBAFA;AAGAC,qBAHA;AAIA;AACAC,gBALA;AAMA;AACAC,cAPA;AAQA;AACAC,iBATA;AAUA;AACAC,qBAXA;AAYA;AACAC,qBAbA;AAcAC,0BAdA;AAeAC,gCAfA;AAgBAC,8BAhBA;AAiBAC;AAAA;AAAA;AAjBA;AAmBA,GA1BA;AA2BAC,SA3BA,qBA2BA;AACA;AACA;AACAC;AACAC;AACA,KAFA;AAGAD;AACA;AACA,GAnCA;AAoCAE,SApCA,qBAoCA;AAAA;;AACA;AAEA;AACA;AACA;AACA,KAFA,EAJA,CAOA;;AACA;AACAD;AACA;AACA,KAHA,EARA,CAaA;;AACA;AACAA;AACA;AACA,KAHA;AAIA,gDAlBA,CAmBA;;AACA;AACA;AACA,KAFA,EApBA,CAuBA;AACA,GA5DA;AA6DAE;AACA;AACAX,WAFA,qBAEA;AACA;AACA;AAJA,GA7DA;AAmEAY;AACAC,eADA,yBACA;AACA;AACA;AACA;AAAAjB;AAAAI;AAAA;AACA;AACA;AACA,KAPA;AAQAc,gBARA,0BAQA;AAAA;;AACA;AACA;AACA;AACA;AACAL;AACA;;AACA;AAEAM;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,OAPA,EAOA,wBAPA;AAQA;AAzBA;AAnEA","names":["name","components","MessagesChat","VueTyper","data","username","userProfile","socket","chat","message","onlineUsers","isTyping","someoneTyping","lastTypingTime","TYPING_TIMER_LENGTH","messageRules","created","Socket","console","mounted","watch","methods","sendMessage","updateTyping","setTimeout"],"sourceRoot":"src/views","sources":["ChatView.vue"],"sourcesContent":["<script>\nimport { io } from \"socket.io-client\";\nimport MessagesChat from \"../components/Chat/ChatContainer.vue\";\nimport { VueTyper } from \"vue-typer\";\n\nexport default {\n  name: \"ChatPage\",\n  components: {\n    MessagesChat,\n    VueTyper,\n  },\n  data() {\n    return {\n      //Username data\n      username: \"You\",\n      userProfile: {},\n      //Socket for connection\n      socket: {},\n      //All messages\n      chat: [],\n      //Message\n      message: \"\",\n      //Online user,\n      onlineUsers: [],\n      //Typing process\n      isTyping: false,\n      someoneTyping: false,\n      lastTypingTime: new Date(),\n      TYPING_TIMER_LENGTH: 400,\n      messageRules: [(v) => !!v || \"Message can't be empty\"],\n    };\n  },\n  created() {\n    //initial connection to the server\n    var Socket = io(\"http://localhost:3000\");\n    Socket.on(\"connect\", () => {\n      console.log(`You connected with id : ${Socket.id}`);\n    });\n    Socket.emit(\"login\");\n    this.socket = Socket;\n  },\n  mounted() {\n    //LISTENERS OF THE SOCKET\n\n    //Send a message\n    this.socket.on(\"message\", (msg) => {\n      this.chat.push(msg);\n    });\n    // Whenever the server emits 'typing', show the typing message\n    this.socket.on(\"typing\", (data) => {\n      console.log(data);\n      this.someoneTyping = true;\n    });\n\n    // Whenever the server emits 'stop typing', kill the typing message\n    this.socket.on(\"stop typing\", (data) => {\n      console.log(data);\n      this.someoneTyping = false;\n    });\n    this.socket.on(\"login\", (data) => {});\n    //Add new user to the chat room\n    this.socket.on(\"online users\", (users) => {\n      this.onlineUsers = users;\n    });\n    //disconnect of the chat room\n  },\n  watch: {\n    // whenever question changes, this function will run\n    message() {\n      this.updateTyping();\n    },\n  },\n  methods: {\n    sendMessage() {\n      if (this.message != \"\") {\n        this.socket.emit(\"message\", this.message);\n        this.chat.push({ username: this.username, message: this.message });\n        this.message = \"\";\n      }\n    },\n    updateTyping() {\n      //TODO : put if is connected or not\n      if (this.isTyping === false) {\n        this.isTyping = true;\n        this.socket.emit(\"typing\");\n        console.log(\"typing\");\n      }\n      this.lastTypingTime = new Date().getTime();\n\n      setTimeout(() => {\n        const typingTimer = new Date().getTime();\n        const timeDiff = typingTimer - this.lastTypingTime;\n        if (timeDiff >= this.TYPING_TIMER_LENGTH && this.isTyping) {\n          this.socket.emit(\"stop typing\");\n          this.isTyping = false;\n        }\n      }, this.TYPING_TIMER_LENGTH);\n    },\n  },\n};\n</script>\n\n<template>\n  <v-container fluid>\n    <v-row>\n      <h1>Register as {{ userProfile.username }}</h1>\n      {{ onlineUsers }}\n    </v-row>\n    <MessagesChat :chat.sync=\"chat\"></MessagesChat>\n    <vue-typer v-if=\"someoneTyping\" text=\"Someone is writting...\"></vue-typer>\n    <v-form ref=\"form\" @submit=\"sendMessage\">\n      <v-footer padless absolute>\n        <v-container>\n          <v-row>\n            <v-text-field\n              outlined\n              filled\n              auto-grow\n              v-model=\"message\"\n              label=\"Send a Message\"\n              placeholder=\"Aa\"\n            ></v-text-field>\n            <v-btn depressed color=\"primary\" type=\"submit\"> Send </v-btn>\n          </v-row>\n        </v-container>\n        <v-col class=\"text-center\" cols=\"12\"> </v-col>\n      </v-footer>\n    </v-form>\n  </v-container>\n</template>\n\n"]},"metadata":{},"sourceType":"module"}